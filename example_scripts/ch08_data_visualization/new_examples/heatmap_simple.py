#!/usr/bin/env python3## Filename: heatmap_simple.py# Author: Zhiguo Wang# Date: 2/9/2021## Description:# Extract fixations from an ASC file to create a heatmapimport osimport reimport numpy as npfrom PIL import Imagefrom matplotlib import cm# Convert EDFs to ASC files with the edf2asc commandline tool# If you run this script from IDLE on macOS, be sure to launch IDLE# from the commandline (e.g., enter "idle3.6" in the terminal)cmd = 'edf2asc -e -res -y freeview/freeview.edf'os.system(cmd)# Open the converted ASC fileasc = open('freeview/freeview.asc', 'r')# Transparency for the heatmapalpha = 0.5new_trial = Falsetrial = 0for line in asc:    # Extract all numerical values from the data line    values = [float(x) for x in re.findall(r'-?\d+\.?\d*', line)]    # Get the correct screen resolution from the GAZE_COORDS message    # MSG	4302897 DISPLAY_COORDS 0 0 1279 799    if re.search('DISPLAY_COORDS', line):        scn_w = int(values[-2]) + 1        scn_h = int(values[-1]) + 1    # Look for the message marking image onset    if re.search('image_onset', line):        new_trial = True        trial += 1        print(f'processing trial # {trial}...')        # Creat a meshgrid to construct the heatmap        w, h = np.meshgrid(np.linspace(0, scn_w, scn_w),                           np.linspace(0, scn_h, scn_h))        heatmap = np.exp(-w**2 - h**2) * 0    if new_trial:        if re.search('EFIX R', line):            # EFIX R 80790373 80790527 155 855.5 596.0 881 63.60 63.75            start_t, end_t, duration, x, y, peakv, res_x, res_y = values            # add the new fixation to the heatmap            heatmap += duration * np.exp(-1.0*(w - x)**2/(2*res_x**2) -                                         1.0*(h - y)**2/(2*res_y**2))        # Path to the background image        # MSG	3558923 !V IMGLOAD FILL images/woods.jpg        if 'IMGLOAD' in line:            bg_image = line.rstrip().split()[-1]    # Look for the message marking image offset, create a heatmap    if re.search('image_offset', line):        # Open the image and resize it to fill up the screen        img = os.path.join('freeview', bg_image)        pic = Image.open(img).convert('RGBA').resize((scn_w, scn_h))        # Apply a colormap (from the colormap library of MatplotLib)        heatmap = np.uint8(cm.seismic(heatmap/np.max(heatmap))*255)        # blending        heatmap = Image.fromarray(heatmap)        blended = Image.blend(pic, heatmap, alpha)        # Save the heatmap as an PNG file        blended.save(f'heatmap_trial_{trial}.png', 'PNG')        new_trial = False# Close the ASC fileasc.close()